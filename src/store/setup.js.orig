/**
 * Name :Parshant Nagpal
 * Description: Contains all redux store configuration
 * date: 7 Seopt 2018
 */
import { AsyncStorage } from "react-native";
import { applyMiddleware, createStore, combineReducers, compose } from "redux";
import thunk from "redux-thunk";
import * as reducers from "./../reducers";
<<<<<<< HEAD
import { persistStore, persistReducer } from 'redux-persist'
import storage from 'redux-persist/lib/storage' // defaults to localStorage for web and AsyncStorage for react-native
=======
import { persistStore, autoRehydrate } from "redux-persist";
>>>>>>> 4b59285d9d85002ee093d57d347bbc3c4c5fea33
import { createLogger } from "redux-logger";
import promise from "./promise";
import array from "./array";
import whitelist from "./whitelist";
import { goToAuth, goHome } from '../config/navigation'
<<<<<<< HEAD

const persistConfig = {
  key: 'root',
  storage,
  whitelist
}
=======
>>>>>>> 4b59285d9d85002ee093d57d347bbc3c4c5fea33
// import startApp from '../config/navigators'
export default function setup() {
  const isDev = global.isDebuggingInChrome || __DEV__; // eslint-disable-line

  const logger = createLogger();

<<<<<<< HEAD
  const middleware = [applyMiddleware(...[thunk, promise, array, logger])];
=======
  const middleware = [autoRehydrate(), applyMiddleware(...[thunk, promise, array, logger])];
>>>>>>> 4b59285d9d85002ee093d57d347bbc3c4c5fea33

  if (isDev) {
    middleware.push(applyMiddleware(require("redux-immutable-state-invariant").default()));
  }
  const reducer = combineReducers(reducers);
<<<<<<< HEAD

  const persistedReducer = persistReducer(persistConfig, reducer)




  const store = createStore(persistedReducer, {}, compose(...middleware));
=======
  const store = createStore(reducer, {}, compose(...middleware));
>>>>>>> 4b59285d9d85002ee093d57d347bbc3c4c5fea33

  // Attach the store to the Chrome debug window
  if (global.isDebuggingInChrome) {
    // eslint-disable-line
    window.store = store;
  }
<<<<<<< HEAD
  persistStore(store, null , () => {
=======
  persistStore(store, { whitelist, storage: AsyncStorage }, () => {
>>>>>>> 4b59285d9d85002ee093d57d347bbc3c4c5fea33
    console.log("newstore", store.getState().app.root);
    if (store.getState().user.isLoggedIn) {
          goHome()
        } else {
          goToAuth()
        }
    // on app loading the persit store loads and we have route from here
    // startApp(store.getState().app.root);
  });
  return store;
}